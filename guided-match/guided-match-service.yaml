openapi: 3.0.1
info:
  title: SCALE Guided Match Service
  version: "0.1.3"
  description: This API allows access to Scale FaT Guided Match functionality from the Scale presentation layer
#  PLACEHOLDERS
#  termsOfService: "http://api.crowncommercial.gov.uk/terms/"
#  contact:
#    email: "apiteam@crowncommercial.gov.uk"
#  license:
#    name: "Open Government Licence 3.0"
#    url: "https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"

# References: FaT HLD - https://crowncommercialservice.atlassian.net/wiki/spaces/SCALE/pages/122617907/HLD+-+B.01+FaT
#
# PLACEHOLDER - Commented out security until Conclave is in place for integration
#security:
#  - OAuth2:
#    - read

servers:
  - url: https://{apiHost}{basePath}
    description: "Server base URL - parameterised for different environments"
    variables:
      apiHost:
        default: api.crowncommercial.gov.uk
        description: API Host (TBC)
      basePath:
        default: /dev/scale/guided-match-service
        description: Guided Match API base path (TBC)

tags:
- name: Guided Match

paths:

  /journey-summaries/{lookup-entry-id}:
    get:
      summary: Get summary of journey for selection screen
      description: |
        Reads data from the search term/journey mapping lookup to use to provide the journey selection screen where a search term returns more than one journey.  Note that the journey description will be context specific for the search term entered
      tags:
      - get-journey-summary
      operationId: get-journey-summary
      parameters:
        - name: lookup-entry-id
          in: path
          description: Id of the entry in the search term / GM Journey lookup table
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/x-correlation-id'
        - $ref: '#/components/parameters/x-causation-id'
        - $ref: '#/components/parameters/x-channel'
        - $ref: '#/components/parameters/x-client'
      responses:
        200:
          description: Get Journey summary response, context specific text for the journey selection screen.
          content:
            application/json:
              schema:
                type: object
                properties:
                  journeyId:
                    type: string
                    description: unique id of the GM journey
                    format: uuid
                  modifier:
                    type: string
                    description: modifier string used in conjunction with the GM Journey to provide behaviour specific to the search term such as moving from a generic GM journey to a context specific one or to support the selection of dynamic answers.
                  selectionText:
                    type: string
                    description: Main text to show for the journey in the journey selection screen. Text describes the journey in the context of the search term.
                  selectionDescription:
                    type: string
                    description: Lower level hint text to show for the journey in the journey selection screen. Text describes the journey in the context of the search term.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: Guided Match Journey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /journeys/{journey-id}:
    post:
      summary: Starts a new Guided Match journey instance
      description: |
        Starts a new Guided Match journey instance based on the definition 'id'.
        Identifies the first question for the journey and returns this with
        answer definitions to the caller.
      tags:
      - start-journey
      operationId: start-journey
      parameters:
        - name: journey-id
          in: path
          description: GM Journey id
          example: 1
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/x-correlation-id'
        - $ref: '#/components/parameters/x-causation-id'
        - $ref: '#/components/parameters/x-channel'
        - $ref: '#/components/parameters/x-client'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JourneySelectionParameters'
      responses:
        200:
          description: Start Journey Response - journeyInstanceId and initial question(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  journeyInstanceId:
                    type: string
                    format: uuid
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuestionDefinition'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: Guided Match Journey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /journey-instances/{journey-instance-id}/questions/{question-id}:
    post:
      summary: For a given answer returns details of the next step
      description: |
        Given the answer provided by the user, evaluates the outcome and passes that back to the UI.
        Outcome will be one of:
          1. Commercial Agreement(s) to display on the results pages
          2. Flag that the user should call Support for further help
          3. Details of the next question(s)
      tags:
      - get-journey-question-outcome
      operationId: get-journey-question-outcome
      parameters:
        - name: journey-instance-id
          in: path
          description: Journey instance id
          example: 1
          required: true
          schema:
            type: string
            format: uuid
        - name: question-id
          in: path
          description: Unique identifier of the question answered in this response (if a set of questions, the id of the first question in the set)
          example: 1
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/x-correlation-id'
        - $ref: '#/components/parameters/x-causation-id'
        - $ref: '#/components/parameters/x-channel'
        - $ref: '#/components/parameters/x-client'
      requestBody:
        required: true
        description: Answer to the question(s) presented to the user
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AnsweredQuestion'
      responses:
        200:
          description: Outcome - what to do next and journey history
          content:
            application/json:
              schema:
                type: object
                properties:
                  outcome:
                    $ref: '#/components/schemas/Outcome'
                  journeyHistory:
                    type: array
                    description: Record of the questions asked and answers given through the journey
                    items:
                      $ref: '#/components/schemas/QuestionHistory'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: Guided Match Journey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

    get:
      summary: Get details of a specific question (may return multiple definitions)
      description: Used to navigate to a specific question
      tags:
      - get-journey-question
      operationId: get-journey-question
      parameters:
        - name: journey-instance-id
          in: path
          description: Journey instance id
          example: '0-0-0-0-0'
          required: true
          schema:
            type: string
            format: uuid
        - name: question-id
          in: path
          description: Unique identifier of the question required (if a set of questions, the id of the first question in the set)
          example: '0-0-0-0-0'
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/x-correlation-id'
        - $ref: '#/components/parameters/x-causation-id'
        - $ref: '#/components/parameters/x-channel'
        - $ref: '#/components/parameters/x-client'
      responses:
        200:
          description: Array of question definitions
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/QuestionDefinition'
        404:
          description: Journey instance or question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /journey-instances/{journey-instance-id}:
    get:
      summary: Returns the journey history
      description: Returns the journey history (all questions and answers) for the specified journey-instance. Includes Question and Answer texts as displayed to the user
      tags:
      - get-history
      operationId: getJourney
      parameters:
        - name: journey-instance-id
          in: path
          description: Journey instance id
          example: 1
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/x-correlation-id'
        - $ref: '#/components/parameters/x-causation-id'
        - $ref: '#/components/parameters/x-channel'
        - $ref: '#/components/parameters/x-client'
      responses:
        200:
          description: Outcome - what happened and journey history
          content:
            application/json:
              schema:
                type: object
                properties:
                  searchTerm:
                    type: string
                    description: The original search term entered by the user
                  userId:
                    type: string
                    format: uuid
                    description: Id of the user. Only present for logged in users
                  outcome:
                    $ref: '#/components/schemas/Outcome'
                  journeyHistory:
                    type: array
                    description: Record of the questions asked and answers given through the journey
                    items:
                      $ref: '#/components/schemas/QuestionHistory'
        404:
          description: Journey instance not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'



components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://ccsexample.com/oauth/auth
          tokenUrl: https://api.crowncommercial.gov.uk/oauth/token
          scopes:
            read: Grants read access
#           only read for MVP
  schemas:

# Common Objects

    Question:
      type: object
      required:
        - id
        - text
        - type
      properties:
        id:
          type: string
          format: uuid
          description: Question id
        text:
          type: string
          description: The text to display for the question in the UI
          example: "For which sector are you purchasing?"
        hint:
          type: string
          description: "A description of the question and its purpose. For example, 'The question sets out to discover what sector the procurement specialist is from. We would expect only one answer' aimed at online help for users."
        type:
          type: string
          enum: [boolean,list,multiselect,number,text,date,daterange]
          description: "The type of the question.  Described in detail in the HLD section 7.1.2.2"
        unit: 
          $ref: '#/components/schemas/Unit'

    Unit:        
      type: string
      enum: [currency,quantity,days,weeks,months,years]
      description: The unit defining the value supplied for a number answer

    Agreement:
      type: object
      description: CCS commercial agreement (aka framework)
      properties:
        number:
          type: string
          description: Commercial agreement number
          example: "RM3733"
        lots:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Lot'

    Lot:
      type: object
      description: A commercial agreement lot
      properties:
        number:
          type: string
          description: Lot number
          example: '1a'
        type:
          type: string
          enum: ['bat', 'cat']
          description: Primary purchasing route (Buy-a-Thing or Contract-a-Thing)
        routeToMarket:
          type: string
          enum: ['fc','da']
          description: Route to market sub-type (Further Competition or Direct Award)
        scale:
          type: boolean
          description: Whether this lot is on the SCALE platform
        url:
          type: string
          description: Jump off link to start procurement / go to marketplace

# GM Historical Objects - definitions used to present history of a journey

    QuestionHistory:
      type: object
      properties:
        question:
          $ref: '#/components/schemas/Question'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerHistory'
        variableName:
          type: string
          description: short variable name used in the interface for FaT/BaT to define the data held in the answer e.g. budget, deliveryDate, organisation

    AnswerHistory:
      type: object
      description: Answer from the user and for context the text displayed for that answer. N.B. a question may have more than one answer
      properties:
        answer:
          type: string
          description: The Answer. The question type indicates how to interpret the response. AnswerIds will be UUID, other question types will be string values. May be more than one answer for a question.
        answerText:
          type: string
          description: The text for the answer as displayed to the user - needed for history
        unit: 
          $ref: '#/components/schemas/Unit'

# GM Operational Objects - definitions used while in a Journey

    JourneySelectionParameters:
      type: object
      properties:
        searchTerm:
          type: string
          description: The search term entered by the user
          example: security
        modifier:
          type: string
          description: The 'modifier' value stored in the search term lookup which governs dynamic list questions and other behaviour within a generic journey
          example: security

    QuestionDefinition:
      type: object
      required:
        - question
      properties:
        question:
          $ref: '#/components/schemas/Question'
        pattern:
          type: string
          description: Regex pattern for client-side validation of free text entry fields
        prePopulatedAnswerId:
          type: string
          format: uuid
          description: Not used in MVP. To be the id of the answer pre-selected from other sources for list question types.
        prePopulatedAnswerSource:
          type: string
          description: "Details of the source data used to pre-populate the answer - e.g. <system>|<json path>, so that the user can be told that the data came from user profile, org data and so on"
        answerDefinitions:
          type: array
          uniqueItems: true
          description: Ordered collection of defined answers (for radio and checkbox types)
          items:
            $ref: '#/components/schemas/AnswerDefinition'

    AnswerDefinition:
      description: Describes a specific answer in questions of type `boolean`, `list` or `multiselect`
      type: object
      required:
        - id
        - text
      properties:
        id:
          type: string
          format: uuid
          description: Answer unique id
        text:
          type: string
          description: 'The text to display for the answer e.g. "< 100", "Education", "Yes", "No"'
        hint:
          type: string
          description: Further descriptive text regarding the answer e.g. 'High value matters'
        order:
          type: integer
          description: Suggested order in which the answer should appear in a UI for a particular question
        conditionalInput:
          $ref: '#/components/schemas/ConditionalInput'
        mutuallyExclusive:
          type: boolean
          description: |
            Mutual exclusion indiciator.
            Answer should be separated by 'Or' in UI and when clicked, deselect all previously selected answers.

    ConditionalInput:
      type: object
      description: Conditional input question definition (aka. 'reveal')
      properties:
        text:
          type: string
          description: Question text e.g. "How much is your budget?"
        hint:
          type: string
          description: question hint text e.g. "An estimate is fine"
        type:
          type: string
          enum: [number, text, date, daterange]
          description: The type of conditional input
        unit: 
          $ref: '#/components/schemas/Unit'

    AnsweredQuestion:
      type: object
      description: The object behind the array of questions, 1 entry per question.
      properties:
        id:
          type: string
          format: uuid
          description: The Id of the answered Question
        answers:
          type: array
          items:
            $ref: '#/components/schemas/GivenAnswer'

    GivenAnswer:
      type: object
      description: |
        Container to facilitating answers to all question types.
        GivenAnswer may consist of:
        * An `id` only (`boolean`, `list` or `multiselect`)
        * A `value` only (`number`, `text`, `date` or `daterange`)
        * Both `id` and `value` (for answers of any question type where a `conditionalInput` object property is present on the `DefinedAnswer`)
      properties:
        id:
          type: string
          format: uuid
          description: Answer unique id
        value:
          type: string
          description: Text or numberic input value

    Outcome:
      type: object
      description: |
        Represents the outcome to the submission of answer(s) to a particular question.
        This could be dynamic i.e. subsequent question(s), one or more agreements (with
        or without lots), or the support type indicating that no matching agreements could be found
      required:
        - type
        - timestamp
      properties:
        type:
          type: string
          enum: [agreement, support, question]
        timestamp:
          type: string
          format: date-time
          description: Date-time that the journey instance was created
        data:
          description: Present when type is 'agreement' or 'question'
          oneOf:
            - type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Agreement'
            - type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/QuestionDefinition'

    Errors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        status:
          type: string
        title:
          type: string
        detail:
          type: string

  parameters:
    x-correlation-id:
      name: x-correlation-id
      in: header
      required: true
      schema:
        type: string
        format: uuid
      description: Logging Service header - The id of the first proccess in the process chain (root process/service)
    x-causation-id:
      name: x-causation-id
      in: header
      required: true
      description: Logging Service header - The id of the predecessor proccess in the process chain (root process/service)
      schema:
        type: string
        format: uuid
    x-channel:
      name: x-channel
      in: header
      required: true
      description: Logging Service header - Type of device
      schema:
        type: string
        enum: [smartphone|tablet|desktop|other]
    x-client:
      name: x-client
      in: header
      description: Logging Service header - Type of client app
      schema:
        type: string
        enum: [mobile-app|browser|client-apis|bot-app]
