openapi: 3.0.1
info:
  title: SCALE Guided Match Decision Tree Service API
  version: "0.1.0"
servers:
  - url: https://{apiHost}{basePath}
    description: "Server base URL - parameterised for different environments"
    variables:
      apiHost:
        default: api.crowncommercial.gov.uk
        description: API Host (TBC)
      basePath:
        default: /dev/scale/decision-tree
        description: Decision Tree API base path (TBC)
tags:
  - name: scale
paths:

  /journeys/{journey-uuid}:
    get:
      tags:
      - get-journey
      operationId: get-journey
      parameters:
        - name: journey-uuid
          in: path
          description: Journey unique ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Journey entity, containing first question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journey'
        404:
          description: Journey entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /journeys/{journey-uuid}/questions/{question-uuid}/outcome:
    post:
      tags:
        - get-journey-question-outcome
      operationId: get-journey-question-outcome
      parameters:
        - name: journey-uuid
          in: path
          description: Journey unique ID
          required: true
          schema:
            type: string
            format: uuid
        - name: question-uuid
          in: path
          description: Journey question unique ID
          required: true
          schema:
            type: string
            format: uuid
        - name: modifier
          in: query
          description: Term used to identify 'modifier' journeys to move to when generic questions are complete
          required: false
          schema:
            type: string
      requestBody:
        description: A collection of answered questions
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AnsweredQuestion'
      responses:
        200:
         description: A journey question outcome entity
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outcome'
        404:
          description: Journey, question or outcome not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

components:
  schemas:

    Journey:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Guided Match journey unique identifier
        name:
          type: string
          description: Short descriptive name e.g. "Linen & Laundry"
        firstQuestion:
          $ref: '#/components/schemas/QuestionDefinition'

    QuestionDefinition:
      type: object
      required:
        - uuid
        - text
        - type
      properties:
        uuid:
          type: string
          format: uuid
          description: Question instance unique identifier
        text:
          type: string
          description: 'Question text e.g. "How many laptops would you like to buy?"'
        hint:
          type: string
          description: Further descriptive text regarding the question
        type:
          type: string
          enum: [boolean, list, multiSelectList, number, textInput, date, dateRange, postcode, nuts]
        variableName:
          type: string
          description: short variable name used in the interface for FaT/BaT to define the data held in the answer e.g. budget, deliveryDate, organisation
        pattern:
          type: string
          description: Regex pattern for client-side validation of free text entry fields
        definedAnswers:
          type: array
          uniqueItems: true
          description: Ordered collection of defined answers (for radio and checkbox types)
          items:
            $ref: '#/components/schemas/AnswerDefinition'

    AnswerDefinition:
      type: object
      required:
        - uuid
        - text
        - order
      properties:
        uuid:
          type: string
          format: uuid
          description: Answer unique identifier
        text:
          type: string
          description: 'Answer text e.g. "< 100", "Education", "Yes", "No"'
        order:
          type: integer
          description: Suggested order in which the answer should appear in a UI for a particular question
        hint:
          type: string
          description: Further descriptive text regarding the answer e.g. 'High value matters'

    AnsweredQuestion:
      type: object
      description: Container for answer values to a particular question (UUIDs, free-text, date range etc).
      properties:
        id:
          type: string
          format: uuid
          description: The Id of the answered Question
        answers:
          type: array
          uniqueItems: true
          items:
            type: string

    Agreement:
      type: object
      description: CCS commercial agreement (aka framework)
      properties:
        number:
          type: string
          description: Commercial agreement number
          example: "RM3733"
        scale:
          type: boolean
          description: Whether this agreement is on the SCALE platform
        lots:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Lot'

    Lot:
      type: object
      description: A commercial agreement lot
      properties:
        number:
          type: string
          description: Lot number
          example: '1a'
        type:
          type: string
          enum: ['bat', 'cat']
          description: Primary purchasing route (Buy-a-Thing or Contract-a-Thing)
        routeToMarket:
          type: string
          enum: ['fc','da']
          description: Route to market sub-type (Further Competition or Direct Award)
        url:
          type: string
          description: Jump off link to start procurement / go to marketplace

    Outcome:
      type: object
      description: |
        Represents the outcome to the submission of answer(s) to a particular question.
        This could be dynamic i.e. a subsequent question or single/multiple agreement lots,
        or the support type indicating that no matching agreement could be found
      required:
        - type
      properties:
        type:
          type: string
          enum: [lot, support, question]
        data:
          description: Present when type is 'lot' or 'question'
          oneOf:
            - type: array
              items:
                $ref: '#/components/schemas/Agreement'
            - type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/QuestionDefinition'

    Errors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        status:
          type: string
        title:
          type: string
        detail:
          type: string
