components:
#  securitySchemes:
#    OAuth2:
#      type: oauth2
#      flows:
#        authorizationCode:
#          authorizationUrl: http://ccsexample.com/oauth/auth
#          tokenUrl: https://api.crowncommercial.gov.uk/oauth/token
#          scopes:
#            read: Grants read access
#           only read for MVP
  schemas:
#
    AgreementSummary:
      type: object
      properties:
        number:
          type: string
          description: Commercial Agreement Number
          example: RM3733
        name:
          type: string
          description: Commercial Agreement Name
          example: "Technology Products 2"
          
    Agreement:
      title: Agreement (OCDS Record)
      allOf:
        - $ref: 'https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/BAT_initial/common/CCS-OCDS_Schema.yaml#/components/schemas/RecordPackage'

#
# Agreement Detail omits some Agreement data in the initial version.
#  - Suppliers will be shown at a Lot level rather than Agreement level
#  - CPV codes are omitted as noted above
#
    AgreementDetail:
      title: Agreement (OCDS Release)
      allOf:
        - $ref: 'https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/BAT_initial/common/OCDS_Schema.yaml#/components/schemas/Release'
      type: object
      properties:
        ocid:
          description: 'A globally unique identifier for this Open Contracting Process. Composed of an ocid prefix and an identifier for the Agreement.'
          example: 'ocds-b5fd17-RM3733'
        id:
          description: 'Version of the Agreement'
          example: 'RM3733_V1'
        title:
          description: A overall title for this Agreements.
          example: "Technology Products 2"
        description:
          description: Short textual description of the commercial agreement
        date:
          description: Effective start date of Commercial Agreement
        tag:
          description: >-
            One or more values from the closed [releaseTag](https://standard.open-contracting.org/1.1/en/schema/codelists/#release-tag) codelist. 
            Tags can be used to filter releases and to understand the kind of information that releases might contain. For an aggreement this
            will always be in the planning stage. In call offs this may be something else from the codelist
          type: array
          items:
            type: string
            enum:
              - planning
              - planningUpdate
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AgreementOrganization'
        planning:
          # Is planning related to the call off's, the agreement creations or both?
          description: >-
            Information from the planning phase of the contracting process. This includes information related 
            to the process of deciding what to contract, when and how. For an Agreement this will be defined in the cqll off.
          pattern: 'null'
          example: 'null'
        buyer:
          description: >-
            A buyer is an entity whose budget will be used to pay for goods, works or services related to a contract. 
            This may be different from the procuring entity who may be specified in the tender data.
            For an Agreement this is null because the call off will define the buyer             
          pattern: 'null'
          example: 'null'
        tender:
          allOf:
            - $ref: '#/components/schemas/AgreementTender'
        awards:
          description: >-
            Information from the award phase of the contracting process. There can be more than one award per 
            contracting process e.g. because the contract is split among different providers, or because 
            it is a standing offer. For an Agreement this is null because the call off will define the Award.
          pattern: 'null'
          example: 'null'
        contracts:
          # Should Contracts contain a template contract?
          description: >-
            Information from the contract creation phase of the procurement process.
            For an Agreement this is null because the call off will define the /contracts.
          pattern: 'null'
          example: 'null'
        language:
          # Should Contracts contain option for other home languages??
          allOf:
            - $ref: '#/components/schemas/AgreementLanguage'
        relatedProcesses:
          description: >-
            The details of related processes: for example, if this process follows on from one or more other 
            processes, represented under a separate open contracting identifier (ocid). This is commonly used 
            to relate mini-competitions to their parent frameworks or individual tenders to a broader planning 
            process. For an Agreement no related processeses should exist. All processes will relate to agreeemnts. 
          pattern: 'null'
          example: 'null'
#
    LotDetail:
      type: object
      properties:
        number:
          type: string
          description: Lot number
          example: 1
        name:
          type: string
          description: Lot name
          example: Finance
        startDate:
          type: string
          format: date
          description: Effective start date of Lot
          example: yyyy-mm-dd
        endDate:
          type: string
          format: date
          example: yyyy-mm-dd
          description: Effective start date of Lot
        description:
          type: string
          description: Short textual description of the Lot
        type:
          type: string
          enum: ["product","service","product and service"]
        routesToMarket:
          type: array
          description: Routes to Market for the Lot and associated bounds
          items:
            $ref: '#/components/schemas/RouteToMarket'
        sectors:
          type: array
          items:
            type: string
            description: A sector permitted to buy using the Agreement/Lot
        relatedAgreementLots:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAgreementLot'
        buyerNeeds:
          # Lot default text for buyer needs for CaT
          type: array
          items:
            $ref: '#/components/schemas/BuyerNeed'
        # Further to the rules model below can data drive the whole rules evaluation triggering the rules from events in CaT and BaT
        # e.g. a list of events mapped to rules in config. When event happens, if Agreement has rule data then we evaluate the rule. All in a standard function passed event data and Agreement data
        # Assumption that event mapping discussed above is required for MVP
        rules:
          type: array
          items:
                $ref: '#/components/schemas/LotRule'
#
    RelatedAgreementLot:
      type: object
      description: A simple reference to a related Agreement/Lot combination and relationship type
      properties:
        caNumber:
          type: string
          description: Commercial Agreement number
          example: "RM3733"
        lotNumber:
          type: string
          description: Lot number within the Commercial Agreement
          example: "6"
        relationship:
          type: string
          description: "The type of the relationship in machine readable form"
          example: "FurtherCompetitionWhenBudgetExceeded"
#
    BuyingMethod:
      type: string
      enum: ["DirectAward" , "FurtherCompetition", "Marketplace", "EAuction"]
      example: "DirectAward"
#
    RouteToMarket:
      # Route to Market for the Lot complete with the rules which determine when it applies
      type: object
      properties:
        buyingMethods:
          type: array
          items:
            $ref: "#/components/schemas/BuyingMethod"
        buyingSystemURL:
          type: string
          format: uri
          description: The URL to use for the system to progress the procurement (e.g. BaT, CaT, other)
        minimumValue:
          type: number
          format: float
          description: The minimum value for which this Lot applies
        maximumValue:
          type: number
          format: float
          description: The maximum value for which this Lot applies
        location:
          # Need to understand what this is used for and how this is used to build it out
          type: string
          description: PLACEHOLDER. Needs to be an anyOf for National:Regional or individual Regions or even lowest level NUTS2
        minContractLength:
          type: object
          properties:
            unit:
              type: string
              enum: ["day","month","year"]
              description: The unit of the length value
            length:
              type: integer
              format: int64
              description: The number of units
        maxContractLength:
          type: object
          properties:
            unit:
              type: string
              enum: ["day","month","year"]
              description: The unit of the length value
            length:
              type: integer
              format: int64
              description: The number of units
#
    LotRule:
      type: object
      description: Rules such as 'Prices may not rise more than {x} times in any consecutive {y} day period' can be included in the 'other' element - in this case 2 data-points would be required. <br><br>In the above example:<br><br>name="max number of prices rises in period"<br>
        ruleId="maxNumberPriceChangesInPeriod"<br>
        lotAttributes=[ {"numberOfTimes","integer",,3,},{"daysInPeriod" ,"integer",,7,}]<br>
        transactionData= ["priceRisesLastPeriod","product.priceRises"]<br>
        evaluationType="complex"<br><br>
        as here specific logic is required to obtain the number of price rises before evaluating.
      properties:
        name:
          type: string
          description: Name of the rule (3 or 4 word description)
          example: "Price rise limit"
        ruleId:
          type: string
          description: Unique identifier of the rule
        lotAttributes:
          type: array
          items:
            $ref: '#/components/schemas/NameValueType'
        transactionData:
          type: array
          description: Data required from the relevant transaction to be able to evaluate the rule
          items:
            type: object
            properties:
              name:
                type: string
                description: name of the variable
                example: "priceRisesLastPeriod"
              location:
                type: string
                description: Path or other location of the data which can be evaluated by the application
                example: "product.priceRises"
        evaluationType:
          type: string
          description: How the rule should be evaluated -<br>
            equal = rule is true if the lotAttribute is equal to the transactionData<br>
            greater = rule is true if the lotAttribute is greater than the transactionData<br>
            less = rule is true if the lotAttribute is less than the transactionData<br>
            complex = rule specific code is required to evaluate (typically where there are multiple variables)<br>
            flag = rule is always true. The presence of the rule is used to flag that certain behaviour is required. In some cases data may be passed in the lotAttributes.
          enum: [equal , greater, less, complex, flag]
          # regexp requires the expression. Left for post-MVP
          # complex will require specific code to evaluate e.g. 'identify number of price rises in n days'
        service:
          type: string
          description: Name of the service to which the rule applies (in future the Agreement Service may only return rules for the requested services)
          example: "BaT"
#
    NameValueType:
      type: object
      properties:
        name:
          type: string
          description: The name of the 'other' bound to be used as hashmap key
        datatype:
        # decided not to use date as this would actually be duration and that's an integer
          type: string
          enum: [string,integer,number]
          description: the datatype of the 'other' lotBound value
        valueText:
          type: string
        valueInteger:
          type: integer
        valueNumber:
          type: number
        units:
          type: string
          description: The unit of the value given in the value fields e.g. kg, mile, hour
#
    AgreementUpdate:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Date that the update was added
          example: yyyy-mm-dd
        linkUrl:
          type: string
          format: uri
          description: Link to further information regarding the update
        text:
          type: string
          description: Actual update text
#
    LotSummary:
      type: object
      properties:
        number:
          type: string
          description: Lot number
          example: 1
        name:
          type: string
          description: Lot name
          example: "Finance"
#
    LotSupplier:
      type: object
      properties:
        organization: 
          $ref: 'https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/master/common/OCDS_Schema.yaml#/components/schemas/Organization'
        supplierStatus: 
          type: string
          enum: [active,suspended,excluded]
        LotContacts:
          type: array
          items:
            $ref: '#/components/schemas/LotContact'
#
    LotContact:
      type: "object"
      description: "Agreement/Lot specific contacts for the Organization"
      properties:
        contact:
        #OCDS contactPoint as returned from the Org/Contact service
          $ref: "https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/master/common/OCDS_Schema.yaml#/components/schemas/ContactPoint"
        contactId:
          type: string
          description: "Unique identifier of the contact"
        lotContactReason:
        #Open Question: is there a more OCDS compliant term?
          type: string
          description: "Reason (usually application function) for which the contact should be contacted in the context of this Lot"
          example: "batQuoteNotification"
#
    BuyerNeed:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of the need (to allow alignment with CaT)
        name:
          type: string
          description: Name of Buyer Need
        text:
          type: string
          description: Text to be displayed for Buyer need    
#
    AgreementTender:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/BAT_initial/common/OCDS_Schema.yaml#/components/schemas/Tender'
      type: object
      description: This is the template for Tenders in the agreement
      properties:
          id:
            description: 'An identifier for this tender process. This WILL be the same as the ocid for an agreeement, and will be replaced by  an internal identifier for call off tender.'
            pattern: 'ocds-RM[1-9]{4}'
            example: 'ocds-b5fd17-RM3733'
          title:
            description: >-
              A null value that will be replaced by a title for this tender in any 
              call off tender from this agreemnt. This will often be used by 
              applications as a headline to attract interest, and to help analysts 
              understand the nature of this procurement.
            pattern: 'null'
            example: 'null'
          description:
            description: >-
              A null value that will be replaced by a summary description of the 
              tender. This complements any structured information provided using the
              items array. Descriptions should be short and easy to read. 
              Avoid using ALL CAPS.
            pattern: 'null'
            example: 'null'
          status:
            description: >-
              An agreement will allways be planning but will be replaced by the current status of the tender
          procuringEntity:
            description: >-
              A null value that will be replaced by the entity managing the procurement. This may be different
              from the buyer who pays for, or uses, the items being procured.
            pattern: 'null'
            example: 'null'
          items:
            description: >-
              A null value that will be replaced by the items included in the call off.
            pattern: 'null'
            example: 'null'
          value:
            allOf:
              - $ref: '#/components/schemas/AgreementValue'
            description: >-
              The total upper estimated value of the procurement aloud within the agreement. A negative value
              indicates that the contracting process may involve payments from the
              supplier to the buyer (commonly used in concession contracts).
              A null value can be replaced by a call off but cannot be exceeded. A null value is totally open.
          minValue:
            allOf:
              - $ref: '#/components/schemas/AgreementValue'
            description: >-
              The minimum estimated value of the procurement aloud within the agreement.  A negative value
              indicates that the contracting process may involve payments from the 
              supplier to the buyer (commonly used in concession contracts).
              A null value can be replaced by a call off but cannot be ubndercut. A null value is totally open.
          procurementMethod:
            description: >-
              The procurement method, from the closed [method](https://standard.open-contracting.org/1.1/e
              /schema/codelists/#method)
              codelist. If null the this can be defined by the user of the Agreement.
            example: 'open'
          awardCriteria:
            description: >-
              The award criteria for the procurement, using the open
              [awardCriteria](https://standard.open-contracting.org/1.1/en/schema/codelists/#award-criteria)
              codelist.
            
              Deprecated Criteria -
                - lowestCost
                - bestProposal
                - bestValueToGovernment  
                - singleBidOnly
                  
                If null the this can be defined by the user of the Agreement.
            example: 'null'
          submissionMethod:
            description: >-
              The methods by which bids are submitted, using the open
              [submissionMethod](https://standard.open-contracting.org/1.1/en/schema/codelists/#submission-metho)
              codelist. If null the this can be defined by the user of the Agreement.
            example: 'null'
          tenderPeriod:
            allOf:
              - $ref: '#/components/schemas/AgreementPeriod'
            description: >-
              The period when the tender is open for submissions. The end date is
              the closing date for tender submissions. For an Agreement the dates will be null to allow 
              the start dates to be specified for each call off. If the duration is specified then the
              call off dates must span a time less than the time specified.
          enquiryPeriod:
            allOf:
              - $ref: '#/components/schemas/AgreementPeriod'
            description: >-
              The period during which potential bidders may submit questions and
              requests for clarification to the entity managing procurement. Details
              of how to submit enquiries should be provided in attached notices, or
              in submissionMethodDetails. Structured dates for when responses to
              questions will be made can be provided using tender milestones.
              For an Agreement the dates will be null to allow 
              the start dates to be specified for each call off. If the duration is specified then the
              call off dates must span a time less than the time specified.
          hasEnquiries:
            description: >-
              A true/false field to indicate whether any enquiries were received
              during the tender process. Structured information on enquiries that
              were received, and responses to them, can be provided using the
              enquiries extension.
            example: 'null'
          awardPeriod:
            allOf:
              - $ref: '#/components/schemas/AgreementPeriod'
            description: >-
              The period for decision making regarding the contract award. The end
              date should be the date on which an award decision is due to be
              finalized. The start date may be used to indicate the start of an
              evaluation period.
              For an Agreement the dates will be null to allow 
              the start dates to be specified for each call off. If the duration is specified then the
              call off dates must span a time less than the time specified.
          contractPeriod:
            allOf:
              - $ref: '#/components/schemas/AgreementPeriod'
            description: >-
              The period over which the contract is estimated or required to be
              active. If the tender does not specify explicit dates, the duration
              field may be used.
              For an Agreement the dates will be null to allow 
              the start dates to be specified for each call off. If the duration is specified then the
              call off dates must span a time less than the time specified although it would be unusual for an agreement to define this..
          numberOfTenderers:
            description: >- 
              This will not be defined in An Agreement. It will depend on the number of suppliers 
              who join the tender
            example: 'null'
          tenderers:
            description: >-
              All parties who submit a bid on a tender. More detailed information on bids and the bidding organization 
              can be provided using the bid extension. For an Agreement
            example: 'null'
            pattern: 'null'             
          milestones:
            items:
              $ref: '#/components/schemas/AgreementMilestone'
          amendments:
            description: >-
              A tender amendment is a formal change to the tender, and generally
              involves the publication of a new tender notice/release. The rationale
              and a description of the changes made can be provided here. For an Agreement this will be null and 
              will be defined by the call off process
            example: 'null'
            pattern: 'null'
#     
    AgreementMilestone:
      description: >-
      allOf:
        - $ref: 'https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/BAT_initial/common/OCDS_Schema.yaml#/components/schemas/Milestone'
      type: object
      properties:
        dueDate:
          pattern: 'null'
          example: 'null'
        dateMet:
          pattern: 'null'
          example: 'null'
        dateModified:
          pattern: 'null'
          example: 'null'
        status:
          pattern: 'null'
          example: 'null'
#
    AgreementOrganization:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/BAT_initial/common/OCDS_Schema.yaml#/components/schemas/Organization'
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
             # need to DELETE as appropriate items never allowed int an agreement. Rest can be added as part of call off.
            enum:
              - buyer
              - procuringEntity
              - supplier
              - tenderer
              - funder
              - enquirer
              - payer
              - payee
              - reviewBody
              - interestedParty
#
    AgreementValue:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/BAT_initial/common/OCDS_Schema.yaml#/components/schemas/Value'
      type: object
      properties:
          amount:
            example: 'null'
          currency:
            example: 'null'
#
    AgreementPeriod:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/Crown-Commercial-Service/ccs-scale-api-definitions/BAT_initial/common/OCDS_Schema.yaml#/components/schemas/Period'
      type: object
      properties:
          startDate:
            example: 'null'
          endDate:
            example: 'null'
          maxExtentDate:
            example: 'null'
          durationInDays:
            example: 20
#
    AgreementLanguage:
      title: Language
      # Should Contracts contain option for other home languages??
      description: >-
        The language of the linked document using either two-letter
        [ISO639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes), or
        extended [BCP47 language
        tags](http://www.w3.org/International/articles/language-tags/). The
        use of lowercase two-letter codes from
        [ISO639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) is
        recommended unless there is a clear user need for distinguishing the
        language subtype. CCS agreements will only be written in UK languages and generally English.
      type: string
      # en=English, cy= Welsh, ga=Irish, gd=Scottish
      enum:
        - en
        - cy
        - ga
        - gd 
      example: 'en'

