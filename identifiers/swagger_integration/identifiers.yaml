{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "CCS identifiers service",
    "description" : "This API is a simple service to generate ids for other CCS services. It is designed for internal use only so will not be exposed via APIG and therefore has no additional such as API keys etc",
    "termsOfService" : "http://api.crowncommercial.gov.uk/terms/",
    "contact" : {
      "email" : "apiteam@crowncommercial.gov.uk"
    },
    "license" : {
      "name" : "Open Government Licence 3.0",
      "url" : "https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ],
  "paths" : {
    "/identifiers/id/{id-type}" : {
      "get" : {
        "tags" : [ "identifiers" ],
        "summary" : "Returns an identifer depending on id-type",
        "description" : "Returns an identifier",
        "parameters" : [ {
          "name" : "id-type",
          "in" : "path",
          "description" : "identifier type",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "organisation",
            "enum" : [ "oidc", "organisation" ]
          }
        }, {
          "name" : "legacy-oidc-type",
          "in" : "query",
          "description" : "oidc identifier type (only applies to oidc legacy)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "fts",
            "enum" : [ "fts", "contracts-finder" ]
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "number of identifiers",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer",
            "example" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "generated id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/identifiers-response"
                    }
                  }
                },
                "examples" : {
                  "ccs-single" : {
                    "summary" : "Bulk conclave single identifier",
                    "value" : {
                      "identifiers" : [ {
                        "id" : "ccs-000001",
                        "id-type" : "organisation",
                        "persisted" : false
                      } ]
                    }
                  },
                  "ccs-bulk" : {
                    "summary" : "Bulk organisation identifiers list of 5",
                    "value" : {
                      "identifiers" : [ {
                        "id" : "ccs-000001",
                        "id-type" : "organisation",
                        "persisted" : false
                      }, {
                        "id" : "ccs-000002",
                        "id-type" : "organisation",
                        "persisted" : false
                      }, {
                        "id" : "ccs-000003",
                        "id-type" : "organisation",
                        "persisted" : false
                      }, {
                        "id" : "ccs-000004",
                        "id-type" : "organisation",
                        "persisted" : false
                      }, {
                        "id" : "ccs-000005",
                        "id-type" : "organisation",
                        "persisted" : false
                      } ]
                    }
                  },
                  "ocds-k4ghtk-000001" : {
                    "summary" : "A sample oidc (legacy FTS) single identifier",
                    "value" : {
                      "identifiers" : [ {
                        "id" : "ocds-h6vjtk-000001",
                        "id-type" : "oidc",
                        "persisted" : false,
                        "legacy" : true,
                        "legacy-oidc-type" : "fts"
                      } ]
                    }
                  },
                  "ocds-b5fd17-000002" : {
                    "summary" : "A sample oidc (legacy contracts finder) single identifier",
                    "value" : {
                      "identifiers" : [ {
                        "id" : "ocds-b5fd17-000002",
                        "id-type" : "oidc",
                        "persisted" : false,
                        "legacy" : true,
                        "legacy-oidc-type" : "contracts-finder"
                      } ]
                    }
                  },
                  "ocds-k4ghtk-000003" : {
                    "summary" : "A sample oidc (new prefix) single identifier",
                    "value" : {
                      "identifiers" : [ {
                        "id" : "ocds-k4ghtk-000003",
                        "id-type" : "oidc",
                        "persisted" : false,
                        "legacy" : false
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it.  A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).\nIf authentication credentials were provided in the request, the server considers them insufficient to grant access.  The client SHOULD NOT automatically repeat the request with the same credentials.  The client MAY repeat the request with new or different credentials.  However, a request might be forbidden for reasons unrelated to the credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.  A 404 status code does not indicate whether this lack of representation is temporary or permanent; the 410 (Gone) status code is preferred over 404 if the origin server knows, presumably through some configurable means, that the condition is likely to be permanent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests. You have breached the request limits for a given resource or for a given IP address range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "500" : {
            "description" : "The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          },
          "502" : {
            "description" : "The 502 (Bad Gateway) status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_502"
                }
              }
            }
          },
          "503" : {
            "description" : "The 503 (Service Unavailable) status code indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.  The server MAY send a Retry-After header field (Section 7.1.3) to suggest an appropriate amount of time for the client to wait before retrying the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_503"
                }
              }
            }
          },
          "504" : {
            "description" : "The 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_504"
                }
              }
            }
          },
          "505" : {
            "description" : "The 505 (HTTP Version Not Supported) status code indicates that the server does not support, or refuses to support, the major version of HTTP that was used in the request message.  The server is indicating that it is unable or unwilling to complete the request using the same major version as the client, as described in Section 2.6 of [RFC7230], other than with this error message.  The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_505"
                }
              }
            }
          }
        }
      }
    },
    "/identifiers/id/types" : {
      "get" : {
        "tags" : [ "identifiers" ],
        "summary" : "Returns a list of available id-types",
        "description" : "Returns a list of available id-types",
        "responses" : {
          "200" : {
            "description" : "generated id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400" : {
            "description" : "The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it.  A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).\nIf authentication credentials were provided in the request, the server considers them insufficient to grant access.  The client SHOULD NOT automatically repeat the request with the same credentials.  The client MAY repeat the request with new or different credentials.  However, a request might be forbidden for reasons unrelated to the credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.  A 404 status code does not indicate whether this lack of representation is temporary or permanent; the 410 (Gone) status code is preferred over 404 if the origin server knows, presumably through some configurable means, that the condition is likely to be permanent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests. You have breached the request limits for a given resource or for a given IP address range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "500" : {
            "description" : "The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          },
          "502" : {
            "description" : "The 502 (Bad Gateway) status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_502"
                }
              }
            }
          },
          "503" : {
            "description" : "The 503 (Service Unavailable) status code indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.  The server MAY send a Retry-After header field (Section 7.1.3) to suggest an appropriate amount of time for the client to wait before retrying the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_503"
                }
              }
            }
          },
          "504" : {
            "description" : "The 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_504"
                }
              }
            }
          },
          "505" : {
            "description" : "The 505 (HTTP Version Not Supported) status code indicates that the server does not support, or refuses to support, the major version of HTTP that was used in the request message.  The server is indicating that it is unable or unwilling to complete the request using the same major version as the client, as described in Section 2.6 of [RFC7230], other than with this error message.  The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_505"
                }
              }
            }
          }
        }
      }
    },
    "/identifiers/{id}" : {
      "head" : {
        "tags" : [ "identifiers" ],
        "summary" : "Returns details of an identifier if it exists or 404 if identifier not found",
        "description" : "Returns details of an identifier",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "value of identifier",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "examples" : {
            "ccs-000001" : {
              "value" : "ccs-000001"
            },
            "ocds-b5fd17-000002" : {
              "value" : "ocds-b5fd17-000002"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "generated id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/identifiers-response"
                },
                "examples" : {
                  "ccs-000001" : {
                    "summary" : "A sample conclave contingency id",
                    "value" : {
                      "id" : "ccs-000001",
                      "id-type" : "organisation",
                      "persisted" : false
                    }
                  },
                  "ocds-k4ghtk-000001" : {
                    "summary" : "A sample oidc (legacy FTS)",
                    "value" : {
                      "id" : "ocds-h6vjtk-000001",
                      "id-type" : "oidc",
                      "persisted" : false,
                      "legacy" : true,
                      "legacy-oidc-type" : "fts"
                    }
                  },
                  "ocds-b5fd17-000002" : {
                    "summary" : "A sample oidc (legacy contracts finder)",
                    "value" : {
                      "id" : "ocds-b5fd17-000002",
                      "id-type" : "oidc",
                      "persisted" : false,
                      "legacy" : true,
                      "legacy-oidc-type" : "contracts-finder"
                    }
                  },
                  "ocds-k4ghtk-000003" : {
                    "summary" : "A sample oidc (new prefix)",
                    "value" : {
                      "id" : "ocds-k4ghtk-000003",
                      "id-type" : "oidc",
                      "persisted" : false,
                      "legacy" : false
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it.  A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).\nIf authentication credentials were provided in the request, the server considers them insufficient to grant access.  The client SHOULD NOT automatically repeat the request with the same credentials.  The client MAY repeat the request with new or different credentials.  However, a request might be forbidden for reasons unrelated to the credentials.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.  A 404 status code does not indicate whether this lack of representation is temporary or permanent; the 410 (Gone) status code is preferred over 404 if the origin server knows, presumably through some configurable means, that the condition is likely to be permanent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests. You have breached the request limits for a given resource or for a given IP address range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "500" : {
            "description" : "The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          },
          "502" : {
            "description" : "The 502 (Bad Gateway) status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_502"
                }
              }
            }
          },
          "503" : {
            "description" : "The 503 (Service Unavailable) status code indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.  The server MAY send a Retry-After header field (Section 7.1.3) to suggest an appropriate amount of time for the client to wait before retrying the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_503"
                }
              }
            }
          },
          "504" : {
            "description" : "The 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_504"
                }
              }
            }
          },
          "505" : {
            "description" : "The 505 (HTTP Version Not Supported) status code indicates that the server does not support, or refuses to support, the major version of HTTP that was used in the request message.  The server is indicating that it is unable or unwilling to complete the request using the same major version as the client, as described in Section 2.6 of [RFC7230], other than with this error message.  The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_505"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "identifiers-response" : {
        "required" : [ "id", "id-type", "persisted" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "the identifier"
          },
          "id-type" : {
            "type" : "string",
            "enum" : [ "organisation", "oidc" ]
          },
          "legacy" : {
            "type" : "boolean",
            "description" : "for oidc identiers whether they use a legacy or new ocds prefix",
            "default" : false
          },
          "legacy-oidc-type" : {
            "type" : "string",
            "description" : "legacy oidc type will be fts or contracts-finder (optional)",
            "enum" : [ "fts", "contracts-finder" ]
          },
          "persisted" : {
            "type" : "boolean",
            "description" : "whether the value has been persisted to RDBMS"
          },
          "created-date" : {
            "type" : "string",
            "description" : "if persisted when was the id created (optional)"
          }
        }
      },
      "Errors" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "detail" : {
            "type" : "string"
          }
        }
      },
      "inline_response_400" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "Invalid request.",
            "default" : "Invalid request."
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/Errors"
        } ]
      },
      "inline_response_403" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "You are not authorized to access this resource.",
            "default" : "You are not authorized to access this resource."
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/Errors"
        } ]
      },
      "inline_response_404" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "The resource you were looking for could not be found.",
            "default" : "The resource you were looking for could not be found."
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/Errors"
        } ]
      },
      "inline_response_429" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "The resource has recieved to many requests",
            "default" : "The resource has recieved to many requests"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/Errors"
        } ]
      },
      "inline_response_500" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "An unknown error has occurred.",
            "default" : "An unknown error has occurred."
          }
        }
      },
      "inline_response_502" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "Gateway Error",
            "default" : "Gateway Error"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/Errors"
        } ]
      },
      "inline_response_503" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "Service Unavailable",
            "default" : "Service Unavailable"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/Errors"
        } ]
      },
      "inline_response_504" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "Gateway Timeout",
            "default" : "Gateway Timeout"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/Errors"
        } ]
      },
      "inline_response_505" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "HTTP Version Not Supported",
            "default" : "HTTP Version Not Supported"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/Errors"
        } ]
      },
      "inline_response_200" : {
        "type" : "object",
        "properties" : {
          "id-types" : {
            "type" : "array",
            "example" : [ "oidc", "correlation", "organisation" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "responses" : {
      "400InvalidRequest" : {
        "description" : "The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_400"
            }
          }
        }
      },
      "403Forbidden" : {
        "description" : "The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it.  A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).\nIf authentication credentials were provided in the request, the server considers them insufficient to grant access.  The client SHOULD NOT automatically repeat the request with the same credentials.  The client MAY repeat the request with new or different credentials.  However, a request might be forbidden for reasons unrelated to the credentials.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_403"
            }
          }
        }
      },
      "404NotFound" : {
        "description" : "The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.  A 404 status code does not indicate whether this lack of representation is temporary or permanent; the 410 (Gone) status code is preferred over 404 if the origin server knows, presumably through some configurable means, that the condition is likely to be permanent.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_404"
            }
          }
        }
      },
      "429TooManyRequests" : {
        "description" : "Too Many Requests. You have breached the request limits for a given resource or for a given IP address range.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_429"
            }
          }
        }
      },
      "500InternalServerError" : {
        "description" : "The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_500"
            }
          }
        }
      },
      "502BadGateway" : {
        "description" : "The 502 (Bad Gateway) status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_502"
            }
          }
        }
      },
      "503ServiceUnavailable" : {
        "description" : "The 503 (Service Unavailable) status code indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.  The server MAY send a Retry-After header field (Section 7.1.3) to suggest an appropriate amount of time for the client to wait before retrying the request.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_503"
            }
          }
        }
      },
      "504GatewayTimeout" : {
        "description" : "The 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_504"
            }
          }
        }
      },
      "505HTTPVersionNotSupported" : {
        "description" : "The 505 (HTTP Version Not Supported) status code indicates that the server does not support, or refuses to support, the major version of HTTP that was used in the request message.  The server is indicating that it is unable or unwilling to complete the request using the same major version as the client, as described in Section 2.6 of [RFC7230], other than with this error message.  The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_505"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "name" : "x-api-key",
        "in" : "header"
      }
    }
  }
}